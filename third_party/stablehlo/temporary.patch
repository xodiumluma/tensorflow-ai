diff --ruN a/stablehlo/CMakeLists.txt b/stablehlo/CMakeLists.txt
--- stablehlo/CMakeLists.txt
+++ stablehlo/CMakeLists.txt
@@ -114,8 +114,7 @@
 
 set(STABLEHLO_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
 set(STABLEHLO_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
-set(STABLEHLO_TOOLS_DIR ${CMAKE_CURRENT_BINARY_DIR}/bin)
-
+set(STABLEHLO_TOOLS_DIR ${STABLEHLO_BINARY_DIR}/bin)
 add_custom_target(check-stablehlo)
 
 add_subdirectory(stablehlo)
diff --ruN a/stablehlo/stablehlo/dialect/TypeInference.h b/stablehlo/stablehlo/dialect/TypeInference.h
--- stablehlo/stablehlo/dialect/TypeInference.h
+++ stablehlo/stablehlo/dialect/TypeInference.h
@@ -81,7 +81,7 @@
                                   std::optional<size_t> expectedGroupSize);
 
 LogicalResult verifyConvolutionAttributes(
-    std::optional<Location> location, Value lhs, Value rhs,
+    std::optional<Location> location, Type lhsType, Type rhsType,
     int64_t inputBatchDimension, int64_t inputFeatureDimension,
     ArrayRef<int64_t> inputSpatialDimensions,
     int64_t kernelInputFeatureDimension, int64_t kernelOutputFeatureDimension,
diff --ruN a/stablehlo/stablehlo/integrations/python/mlir/dialects/stablehlo.py b/stablehlo/stablehlo/integrations/python/mlir/dialects/stablehlo.py
--- stablehlo/stablehlo/integrations/python/mlir/dialects/stablehlo.py
+++ stablehlo/stablehlo/integrations/python/mlir/dialects/stablehlo.py
@@ -17,3 +17,12 @@
 # pylint: disable=wildcard-import,relative-beyond-top-level,g-import-not-at-top
 from ._stablehlo_ops_gen import *
 from .._mlir_libs._stablehlo import *
+
+
+# TODO(#1298): Add C++ API as well
+def get_earliest_forward_compatible_version():
+  """Return the earliest StableHLO version that the current StableHLO version
+
+  is still forward compatible with.
+  """
+  return "0.9.0"
diff --ruN a/stablehlo/stablehlo/testdata/lit.cfg.py b/stablehlo/stablehlo/testdata/lit.cfg.py
--- stablehlo/stablehlo/testdata/lit.cfg.py
+++ stablehlo/stablehlo/testdata/lit.cfg.py
@@ -20,6 +20,7 @@
 
 import lit.formats
 from lit.llvm import llvm_config
+import lit.util
 
 # Populate Lit configuration with the minimal required metadata.
 # Some metadata is populated in lit.site.cfg.py.in.
@@ -28,7 +29,29 @@
 config.suffixes = ['.mlir']
 config.test_source_root = os.path.dirname(__file__)
 
-# Make LLVM and StableHLO tools available in RUN directives
+# test_exec_root: The root path where tests should be run.
+config.test_exec_root = os.path.join(config.stablehlo_obj_root, 'test')
+
+config.substitutions.append(('%PATH%', config.environment['PATH']))
+config.substitutions.append(('%shlibext', config.llvm_shlib_ext))
+
+llvm_config.with_system_environment(['HOME', 'INCLUDE', 'LIB', 'TMP', 'TEMP'])
+
+llvm_config.use_default_substitutions()
+
+# excludes: A list of directories to exclude from the testsuite.
+config.excludes = []
+
+# test_source_root: The root path where tests are located.
+config.test_source_root = os.path.dirname(__file__)
+
+# test_exec_root: The root path where tests should be run.
+config.test_exec_root = os.path.join(config.stablehlo_obj_root, 'testdata')
+config.stablehlo_tools_dir = os.path.join(config.stablehlo_obj_root, 'bin')
+
+# Tweak the PATH to include the tools dir.
+llvm_config.with_environment('PATH', config.llvm_tools_dir, append_path=True)
+
 tools = [
   'FileCheck',
   'stablehlo-opt',
diff --ruN a/stablehlo/stablehlo/testdata/lit.site.cfg.py.in b/stablehlo/stablehlo/testdata/lit.site.cfg.py.in
--- stablehlo/stablehlo/testdata/lit.site.cfg.py.in
+++ stablehlo/stablehlo/testdata/lit.site.cfg.py.in
@@ -14,6 +14,48 @@
 
 @LIT_SITE_CFG_IN_HEADER@
 
+import sys
+
+config.host_triple = "@LLVM_HOST_TRIPLE@"
+config.target_triple = "@TARGET_TRIPLE@"
+config.llvm_src_root = "@LLVM_SOURCE_DIR@"
+config.llvm_obj_root = "@LLVM_BINARY_DIR@"
+config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
+config.llvm_lib_dir = "@LLVM_LIBRARY_DIR@"
+config.llvm_shlib_dir = "@SHLIBDIR@"
+config.llvm_shlib_ext = "@SHLIBEXT@"
+config.llvm_exe_ext = "@EXEEXT@"
+config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
+config.python_executable = "@PYTHON_EXECUTABLE@"
+config.gold_executable = "@GOLD_EXECUTABLE@"
+config.ld64_executable = "@LD64_EXECUTABLE@"
+config.enable_shared = @ENABLE_SHARED@
+config.enable_assertions = @ENABLE_ASSERTIONS@
+config.targets_to_build = "@TARGETS_TO_BUILD@"
+config.native_target = "@LLVM_NATIVE_ARCH@"
+config.llvm_bindings = "@LLVM_BINDINGS@".split(' ')
+config.host_os = "@HOST_OS@"
+config.host_cc = "@HOST_CC@"
+config.host_cxx = "@HOST_CXX@"
+# Note: ldflags can contain double-quoted paths, so must use single quotes here.
+config.host_ldflags = '@HOST_LDFLAGS@'
+config.llvm_use_sanitizer = "@LLVM_USE_SANITIZER@"
+config.llvm_host_triple = '@LLVM_HOST_TRIPLE@'
+config.host_arch = "@HOST_ARCH@"
+config.stablehlo_src_root = "@STABLEHLO_SOURCE_DIR@"
+config.stablehlo_obj_root = "@CMAKE_BINARY_DIR@"
+
+# Support substitution of the tools_dir with user parameters. This is
+# used when we can't determine the tool dir at configuration time.
+try:
+    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
+    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
+except KeyError:
+    e = sys.exc_info()[1]
+    key, = e.args
+    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))
+
+
 import lit.llvm
 lit.llvm.initialize(lit_config, config)
 config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
diff --ruN a/stablehlo/stablehlo/tests/lit.cfg.py b/stablehlo/stablehlo/tests/lit.cfg.py
--- stablehlo/stablehlo/tests/lit.cfg.py
+++ stablehlo/stablehlo/tests/lit.cfg.py
@@ -20,6 +20,7 @@
 
 import lit.formats
 from lit.llvm import llvm_config
+import lit.util
 
 # Populate Lit configuration with the minimal required metadata.
 # Some metadata is populated in lit.site.cfg.py.in.
@@ -28,7 +29,33 @@
 config.suffixes = ['.mlir']
 config.test_source_root = os.path.dirname(__file__)
 
-# Make LLVM and StableHLO tools available in RUN directives
+# test_exec_root: The root path where tests should be run.
+config.test_exec_root = os.path.join(config.stablehlo_obj_root, 'test')
+
+config.substitutions.append(('%PATH%', config.environment['PATH']))
+config.substitutions.append(('%shlibext', config.llvm_shlib_ext))
+
+llvm_config.with_system_environment(['HOME', 'INCLUDE', 'LIB', 'TMP', 'TEMP'])
+
+llvm_config.use_default_substitutions()
+
+# excludes: A list of directories to exclude from the testsuite.
+config.excludes = []
+
+# test_source_root: The root path where tests are located.
+config.test_source_root = os.path.dirname(__file__)
+
+# test_exec_root: The root path where tests should be run.
+config.test_exec_root = os.path.join(config.stablehlo_obj_root, 'tests')
+config.stablehlo_tools_dir = os.path.join(config.stablehlo_obj_root, 'bin')
+
+# Tweak the PATH to include the tools dir.
+llvm_config.with_environment('PATH', config.llvm_tools_dir, append_path=True)
+
+tool_dirs = [
+    config.stablehlo_tools_dir,
+    config.llvm_tools_dir,
+]
 tools = [
   'FileCheck',
   'stablehlo-opt',
diff --ruN a/stablehlo/stablehlo/tests/lit.site.cfg.py.in b/stablehlo/stablehlo/tests/lit.site.cfg.py.in
--- stablehlo/stablehlo/tests/lit.site.cfg.py.in
+++ stablehlo/stablehlo/tests/lit.site.cfg.py.in
@@ -14,8 +14,50 @@
 
 @LIT_SITE_CFG_IN_HEADER@
 
+import sys
+
+config.host_triple = "@LLVM_HOST_TRIPLE@"
+config.target_triple = "@TARGET_TRIPLE@"
+config.llvm_src_root = "@LLVM_SOURCE_DIR@"
+config.llvm_obj_root = "@LLVM_BINARY_DIR@"
+config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
+config.llvm_lib_dir = "@LLVM_LIBRARY_DIR@"
+config.llvm_shlib_dir = "@SHLIBDIR@"
+config.llvm_shlib_ext = "@SHLIBEXT@"
+config.llvm_exe_ext = "@EXEEXT@"
+config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
+config.python_executable = "@PYTHON_EXECUTABLE@"
+config.gold_executable = "@GOLD_EXECUTABLE@"
+config.ld64_executable = "@LD64_EXECUTABLE@"
+config.enable_shared = @ENABLE_SHARED@
+config.enable_assertions = @ENABLE_ASSERTIONS@
+config.targets_to_build = "@TARGETS_TO_BUILD@"
+config.native_target = "@LLVM_NATIVE_ARCH@"
+config.llvm_bindings = "@LLVM_BINDINGS@".split(' ')
+config.host_os = "@HOST_OS@"
+config.host_cc = "@HOST_CC@"
+config.host_cxx = "@HOST_CXX@"
+# Note: ldflags can contain double-quoted paths, so must use single quotes here.
+config.host_ldflags = '@HOST_LDFLAGS@'
+config.llvm_use_sanitizer = "@LLVM_USE_SANITIZER@"
+config.llvm_host_triple = '@LLVM_HOST_TRIPLE@'
+config.host_arch = "@HOST_ARCH@"
+config.stablehlo_src_root = "@STABLEHLO_SOURCE_DIR@"
+config.stablehlo_obj_root = "@CMAKE_BINARY_DIR@"
+
+# Support substitution of the tools_dir with user parameters. This is
+# used when we can't determine the tool dir at configuration time.
+try:
+    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
+    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
+except KeyError:
+    e = sys.exc_info()[1]
+    key, = e.args
+    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))
+
+
 import lit.llvm
 lit.llvm.initialize(lit_config, config)
-config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
-config.stablehlo_tools_dir = "@STABLEHLO_TOOLS_DIR@"
+
+# Let the main config do the real work.
 lit_config.load_config(config, "@STABLEHLO_SOURCE_DIR@/stablehlo/tests/lit.cfg.py")
diff --ruN a/stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp b/stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp
--- stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp
+++ stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp
@@ -221,6 +221,9 @@
     auto operandType = op.getOperand().getType().cast<ShapedType>();
     auto isOperandUnsigned = operandType.getElementType().isUnsignedInteger();
     auto resultType = op.getResult().getType().cast<ShapedType>();
+    if (!resultType.getElementType().isIntOrIndex())
+      return rewriter.notifyMatchFailure(op,
+                                         "expected integer result tensor type");
     auto resultBitwidth = resultType.getElementType().getIntOrFloatBitWidth();
     return evalUnary(rewriter, op, [&](APInt operand) {
       return APSInt(operand, isOperandUnsigned).extOrTrunc(resultBitwidth);
@@ -332,6 +335,9 @@
   LogicalResult matchAndRewrite(SignOp op,
                                 PatternRewriter& rewriter) const override {
     auto resultType = op.getResult().getType().cast<ShapedType>();
+    if (!resultType.getElementType().isIntOrIndex())
+      return rewriter.notifyMatchFailure(op,
+                                         "expected integer result tensor type");
     auto resultBitwidth = resultType.getElementType().getIntOrFloatBitWidth();
     return evalUnary(rewriter, op, [&](APInt operand) {
       int64_t result;
@@ -595,8 +601,14 @@
     // This complicates the logic quite a bit and is not needed to pass the
     // current tests, so we leave this for future work.
     auto resultType = op.getResult().getType().cast<ShapedType>();
-    if (operandType.getElementType().getIntOrFloatBitWidth() !=
-        resultType.getElementType().getIntOrFloatBitWidth())
+    auto getBitWidthFn = [](ShapedType type) {
+      auto elementType = type.getElementType();
+      if (auto complexType = elementType.dyn_cast<ComplexType>())
+        return complexType.getElementType().getIntOrFloatBitWidth();
+      return elementType.getIntOrFloatBitWidth();
+    };
+
+    if (getBitWidthFn(operandType) != getBitWidthFn(resultType))
       return rewriter.notifyMatchFailure(op, "unsupported bitwidth");
 
     return refineReturnShape(rewriter, op, operandType.getShape());

