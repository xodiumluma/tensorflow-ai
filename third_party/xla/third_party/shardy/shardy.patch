diff --git a/shardy/BUILD b/shardy/BUILD
index 78b0d14..02c260c 100644
--- a/shardy/BUILD
+++ b/shardy/BUILD
@@ -5,7 +5,10 @@ package(default_visibility = ["//visibility:public"])
 # Allow visibility from the mlir language server.
 package_group(
     name = "friends",
-    packages = ["//third_party/py/openxla/sdy/..."],
+    packages = [
+        "//third_party/py/mlir/...",
+        "//third_party/py/openxla/sdy/...",
+    ],
 )
 
 # Generates lit config input file by applying path placeholder substitutions
diff --git a/shardy/dialect/sdy/transforms/propagation/aggressive_factor_propagation.cc b/shardy/dialect/sdy/transforms/propagation/aggressive_factor_propagation.cc
index a0a670f..d910429 100644
--- a/shardy/dialect/sdy/transforms/propagation/aggressive_factor_propagation.cc
+++ b/shardy/dialect/sdy/transforms/propagation/aggressive_factor_propagation.cc
@@ -60,7 +60,7 @@ AggressiveFactorPropagation::getCompatibleMajorShardingAxesForAllFactors(
                 axisRef, tensorFactorShardings.replicatedAxes, factorSharding,
                 shardedSize, factorSizes[factorIndex]);
           },
-          mesh);
+          mesh, conservativePropagation);
     }
   }
 
@@ -136,7 +136,7 @@ AggressiveFactorPropagation::getCompatibleMajorShardingAxesForAllFactors(
                 axisRef, tensorFactorSharding.factorIndexToSharding,
                 factorIndex, resultSnapshot);
           },
-          mesh);
+          mesh, conservativePropagation);
     }
   }
 
diff --git a/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.cc b/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.cc
index a13cbe0..78954d6 100644
--- a/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.cc
+++ b/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.cc
@@ -121,7 +121,7 @@ void BasicFactorPropagation::truncateAxesByRemovingConflicts(
     std::function<std::optional<AxisRefAttr>(AxisRefAttr curAxis,
                                              int64_t shardedSize)>
         removeConflicts,
-    MeshAttr mesh) const {
+    MeshAttr mesh, bool conservativePropagation) const {
   int64_t shardedSize = 1;
   for (const auto [axisIndex, curAxis] : llvm::enumerate(axes)) {
     // This check is only for tests. For convenience we can pass a `MeshAttr()`
@@ -131,7 +131,7 @@ void BasicFactorPropagation::truncateAxesByRemovingConflicts(
     }
 
     std::optional<AxisRefAttr> newAxis = removeConflicts(curAxis, shardedSize);
-    if (!newAxis) {
+    if (!newAxis || (conservativePropagation && newAxis->getSubAxisInfo())) {
       axes.truncate(axisIndex);
       return;
     }
@@ -325,11 +325,7 @@ SmallVector<AxisRefAttr> BasicFactorPropagation::getCompatibleMajorAxes(
 
 std::optional<AxisRefAttr> BasicFactorPropagation::compatiblePrefix(
     AxisRefAttr axisRef, const TensorFactorShardings& tensorFactorSharding,
-    int64_t factorIndex, int64_t shardedSize, int64_t factorSize,
-    bool conservativePropagation) const {
-  if (conservativePropagation && axisRef.getSubAxisInfo()) {
-    return std::nullopt;
-  }
+    int64_t factorIndex, int64_t shardedSize, int64_t factorSize) const {
   const FactorIndexToSharding& factorIndexToSharding =
       tensorFactorSharding.factorIndexToSharding;
 
@@ -356,16 +352,14 @@ std::optional<AxisRefAttr> BasicFactorPropagation::compatiblePrefix(
 
 std::optional<AxisRefAttr> BasicFactorPropagation::compatiblePrefix(
     AxisRefAttr axisRef, const ShardingProjection& projection,
-    int64_t factorIndex, int64_t shardedSize, int64_t factorSize,
-    bool conservativePropagation) const {
+    int64_t factorIndex, int64_t shardedSize, int64_t factorSize) const {
   AxisRefAttr result = axisRef;
   for (const TensorFactorShardings& tensorFactorSharding :
        llvm::concat<const TensorFactorShardings>(projection.getOperands(),
                                                  projection.getResults())) {
     ASSIGN_OR_RETURN_IF_NULLOPT(
-        result,
-        compatiblePrefix(result, tensorFactorSharding, factorIndex, shardedSize,
-                         factorSize, conservativePropagation));
+        result, compatiblePrefix(result, tensorFactorSharding, factorIndex,
+                                 shardedSize, factorSize));
   }
   return result;
 }
@@ -388,9 +382,9 @@ SmallVector<AxisRefAttr> BasicFactorPropagation::getCompatibleMajorShardingAxes(
       resultAxes,
       [&](AxisRefAttr axisRef, int64_t shardedSize) {
         return compatiblePrefix(axisRef, projection, factorIndex, shardedSize,
-                                factorSize, conservativePropagation);
+                                factorSize);
       },
-      mesh);
+      mesh, conservativePropagation);
 
   return resultAxes;
 }
diff --git a/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.h b/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.h
index 8a526f0..853a4b3 100644
--- a/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.h
+++ b/shardy/dialect/sdy/transforms/propagation/basic_factor_propagation.h
@@ -145,8 +145,9 @@ class BasicFactorPropagation : public FactorPropagation {
 
   // For each axis in `axes`, call `removeConflicts` to get the compatible
   // prefix.
-  // 1. If `removeConflicts` returns `std::nullopt`, remove the current axis and
-  //    the following ones.
+  // 1. If (1) `removeConflicts` returns `std::nullopt`, or (2)
+  //    `conservativePropagation` is true and `removeConflicts` returns a
+  //    sub-axis, remove the current axis and the following ones.
   // 2. If `removeConflicts` returns a prefix that is different from the current
   //    axis, replace the current axis with the returned one and remove the
   //    following axes.
@@ -156,7 +157,7 @@ class BasicFactorPropagation : public FactorPropagation {
       std::function<std::optional<AxisRefAttr>(AxisRefAttr curAxis,
                                                int64_t shardedSize)>
           removeConflicts,
-      MeshAttr mesh) const;
+      MeshAttr mesh, bool conservativePropagation) const;
 
  private:
   // Returns the largest compatible prefix of `axisRef` by removing conflicts in
@@ -169,15 +170,13 @@ class BasicFactorPropagation : public FactorPropagation {
   // by removing conflicts with other factors and within the factor itself.
   std::optional<AxisRefAttr> compatiblePrefix(
       AxisRefAttr axisRef, const TensorFactorShardings& tensorFactorSharding,
-      int64_t factorIndex, int64_t shardedSize, int64_t factorSize,
-      bool conservativePropagation) const;
+      int64_t factorIndex, int64_t shardedSize, int64_t factorSize) const;
 
   // Returns the largest compatible prefix of `axisRef` by removing conflicts
   // with every `TensorFactorShardings` in `projection`.
   std::optional<AxisRefAttr> compatiblePrefix(
       AxisRefAttr axisRef, const ShardingProjection& projection,
-      int64_t factorIndex, int64_t shardedSize, int64_t factorSize,
-      bool conservativePropagation) const;
+      int64_t factorIndex, int64_t shardedSize, int64_t factorSize) const;
 };
 
 }  // namespace sdy
diff --git a/shardy/integrations/python/BUILD b/shardy/integrations/python/BUILD
index b2b2bd0..6939409 100644
--- a/shardy/integrations/python/BUILD
+++ b/shardy/integrations/python/BUILD
@@ -1,25 +1,3 @@
 # Python integration for SDY.
 
-load("@rules_python//python:py_library.bzl", "py_library")
-load("@rules_python//python:py_test.bzl", "py_test")
-
 package(default_visibility = ["//visibility:public"])
-
-py_library(
-    name = "sdy",
-    srcs = [
-        "sdy.py",
-    ],
-    deps = [
-        "//shardy/integrations/python/ir",
-    ],
-)
-
-py_test(
-    name = "sdy_test",
-    srcs = ["sdy_test.py"],
-    deps = [
-        ":sdy",
-        "//third_party/py/mlir:ir",
-    ],
-)
diff --git a/shardy/integrations/python/ir/BUILD b/shardy/integrations/python/ir/BUILD
index ee40ef5..186668c 100644
--- a/shardy/integrations/python/ir/BUILD
+++ b/shardy/integrations/python/ir/BUILD
@@ -1,8 +1,6 @@
 # Python IR bindings for the SDY dialect.
 
 load("@llvm-project//mlir:tblgen.bzl", "gentbl_filegroup", "td_library")
-load("@rules_python//python:py_library.bzl", "py_library")
-load("//third_party/py:py_extension.bzl", "py_extension")
 
 package(default_visibility = ["//visibility:public"])
 
@@ -21,6 +19,7 @@ td_library(
 filegroup(
     name = "sdy_ops_py_files",
     srcs = [
+        "sdy.py",
         ":sdy_ops_py_gen",
     ],
 )
@@ -42,41 +41,3 @@ gentbl_filegroup(
         ":sdy_ops_td_files",
     ],
 )
-
-py_library(
-    name = "ir",
-    srcs = [
-        "__init__.py",
-        "_ods_common.py",
-        ":sdy_ops_py_gen",
-    ],
-    deps = [
-        ":_sdy",
-        "//third_party/py/mlir",
-        "//third_party/py/mlir:core",
-        "//third_party/py/mlir:ir",
-    ],
-)
-
-py_extension(
-    name = "_sdy",
-    srcs = [
-        "sdy_module.cc",
-    ],
-    copts = [
-        "-fexceptions",
-        "-frtti",
-    ],
-    features = [
-        # Cannot use header_modules (parse_headers feature fails). Needed to get the extension
-        # to build.
-        "-use_header_modules",
-    ],
-    deps = [
-        "//shardy/dialect/sdy/ir:dialect",
-        "//shardy/integrations/c:sdy_capi",
-        "@llvm-project//mlir:CAPIIR",
-        "@llvm-project//mlir:IR",
-        "@llvm-project//mlir:MLIRBindingsPythonHeadersAndDeps",
-    ],
-)
diff --git a/shardy/integrations/python/sdy.py b/shardy/integrations/python/sdy.py
deleted file mode 100644
index ad4ea7e..0000000
--- a/shardy/integrations/python/sdy.py
+++ /dev/null
@@ -1,18 +0,0 @@
-# Copyright 2024 The Shardy Authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-# ==============================================================================
-"""Python bindings for Shardy."""
-
-# pylint: disable=unused-import
-from . import ir
