// RUN: fusion_to_mlir %s | mlir_fusions_opt -xla-gpu-test-to-inline | FileCheck %s --dump-input=always
// RUN: test_correctness %s --bijection_outputs=broadcast

bcast {
  zero = bf16[] constant(0)
  ROOT broadcast = bf16[2,16,48]{2,1,0} broadcast(zero), dimensions={}
}

// CHECK-DAG: #[[MAP0:.*]] = #xla_gpu.indexing_map<(d0) -> (d0 floordiv 6)
// CHECK-DAG: #[[MAP1:.*]] = #xla_gpu.indexing_map<(d0, d1) -> (((d1 * 128 + d0) floordiv 48) mod 16)
// CHECK-DAG: #[[MAP2:.*]] = #xla_gpu.indexing_map<(d0, d1) -> ((d1 * 128 + d0) mod 48)
// CHECK: func.func @main(%[[ARG0:.*]]: tensor<2x16x48xbf16>
// CHECK: %[[THREAD_ID:.*]] = gpu.thread_id
// CHECK: %[[BLOCK_ID:.*]] = gpu.block_id
// CHECK: %[[I0:.*]] = xla_gpu.apply_indexing #[[MAP0]]
// CHECK: %[[I1:.*]] = xla_gpu.apply_indexing #[[MAP1]]
// CHECK: %[[I2:.*]] = xla_gpu.apply_indexing #[[MAP2]]
// CHECK: %[[CST:.*]] = arith.constant 0.000
// CHECK: %[[INSERTED:.*]] = tensor.insert %[[CST]] into %[[ARG0]][%[[I0]], %[[I1]], %[[I2]]]
