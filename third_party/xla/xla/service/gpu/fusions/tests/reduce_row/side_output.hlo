// RUN: fusion_to_mlir %s | mlir_fusions_opt -cse -xla-gpu-simplify-arith -canonicalize | FileCheck %s
// RUN: test_correctness %s --bijection_inputs=reduce:0 --bijection_outputs=reduce --bijection_outputs=exp

add {
  lhs = f32[] parameter(0)
  rhs = f32[] parameter(1)
  ROOT add = f32[] add(lhs, rhs)
}

fused_computation {
  param_0 = f32[8,2048] parameter(0)
  param_1 = f32[] parameter(1)
  exp = f32[8,2048] exponential(param_0)
  reduce = f32[8] reduce(param_0, param_1), dimensions={1}, to_apply=add
  ROOT t = (f32[8], f32[8,2048]) tuple(reduce, exp)
}

// CHECK:     @fused_computation
// CHECK:     scf.for
// CHECK:       scf.for
// CHECK:         %[[SIDE_OUTPUT:.*]] = xla_gpu.pure_call @fused_computation_exp
// CHECK-NEXT:    tensor.insert %[[SIDE_OUTPUT]]
// CHECK:         scf.yield
// CHECK:       scf.yield
