# TF Bazel config - group and simplify TF build options
#
# ==CONFIG==
# Android options:
#   android:
#   android_arm:
#   android_arm64:
#   android_x86:
#   android_x86_64:
#
# iOS options:
#   ios:
#   ios_armv7:
#   ios_arm64:
#   ios_x86_64:
#   ios_fat:
#
# macos options
#   darwin_arm64:
#
# compiler options:  
#   cuda_clang:                 Use clang for building CUDA code
#   avx_linux:                  Linux avx instruction set build
#   avx_win:                    Windows avx instruction set build
#
# Other options for building         
#   short_logs:                 Skip warnings, only log errors when building
#   verbose_logs:               Display build time compiler warnings
#   monolithic:                 Build all C++ code into a single shared object
#   dynamic_kernels:            Experimental flag to link kernels dynamically
#   dbg:                        Debug info build
#
# TF versions         
#   v2:                         Build v2
#
# Feature and 3rd party lib support options         
#   xla:                        Build XLA-enabled TF
#   tpu:                        Build TPU-supported TF
#   cuda:                       Build CUDA-supported TF
#   cuda_clang:                 Build CUDA Clang-supported TF
#   rocm:                       Build AMD GPU-supported TF (rocm)
#   mkl:                        Turn on full mkl support
#   tensorrt:                   Turn on Tensorrt
#   noaws:                      Don't rely on AWS S3 storage
#   nogcp:                      Don't rely on GCP
#   nohdfs:                     No hadoop hdfs for you
#   nonccl:                     No nccl
#
# Remote build execution configuration - works only with TF team projects
#   rbe_base:                   For all OSes use general RBE options
#   rbe_linux:                  For all Linux builds, use general RBE options
#   rbe_win:                    For all Windows builds, use general RBE options
#
#   rbe_linux_cpu:              RBE configuration - build with CPU only
#   rbe_linux_cuda:             RBE configuration - build with GPU support via clang
#   rbe_linux_cuda_nvcc:        RBE configuration - build with GPU support via nvcc
#
#   rbe_win_py39:               Configure Windows Python 3.9 RBE
#
#   tensorflow_testing_rbe_win: Windows RBE configuration for tensorflow-testing project
#
# Embedded Linux configuration (experimental - only tested with TFLite build for now)
#   elinux:                     For all OSes use General Embedded Linux configuration
#   elinux_aarch64:             For aarch64 (ARM64) Embedded Linux CPU configuration
#   elinux_armhf:               For armhf (ARMv7) Embedded Linux CPU configuration
# 
# Release build options - all OSes
#   release_base:               For all builds on all OSes
#   release_cpu_linux:          Toolchain & CUDA configuration for Linux CPU builds 
#   release_gpu_linux:          Toolchain & CUDA configuration for Linux GPU builds 
#   release_cpu_macos:          Toolchain & CUDA configuration for MacOS CPU builds 
#   release_cpu_windows:        Toolchain & CUDA configuration for Windows CPU builds 
#
# Build options out of the box - applied first, unconditionally
#
# Projects that use TF as part of Bazel build process, having an empty bazelrc will result
# in a monolithic build. The following sets up modular op registration support by default
build --define framework_shared_object=true
build --define tsl_protobuf_header_only=true

build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true

build --spawn_strategy=standalone
build -c opt

# print out configuration options from rc files
build --announce_rc

# either document this option or remove
build --define=grpc_no_ares=true

# For info on --incompatible_remove_legacy_whole_archive, please refer to
# https://github.com/bazelbuild/bazel/issues/7362
# In Bazel 1.0 and newer it's set to true. There were efforts to get
# TF to work with the defaults, but there were errors that the test coverage
# couldn't cover
# The Bazel devs are working on the transitive shared libs feature
# Till then this is what we've got - we can re-explore this in the future
#
# @TODO - take out these two lines when TF doesn't rely on Bazel packing every
# library archive via -whole_archive -no_whole_archive
build --noincompatible_remove_legacy_whole_archive
build --features=-force_no_whole_archive

# Document or remove
build --enable_platform_specific_config

# Make XLA support the default
build --define=with_xla_support=true

# Document or remove
build --config=short_logs

# Document or remove
build --config=v2

# Turn off AWS/HDFS support
build --define=no_aws_support=true
build --define=no_hdfs_support=true

# we need the experimental flag as TF has now `cc_shared_library` targets
# Delete it when `cc_shared_library` is turned on by default
build --experimental_cc_shared_library

# cc_shared_library checks that libraries linked statically are done at most once
build --experimental_link_static_libraries_once=false

# Avoid regressions for the two incompatible changes
# @todo - remove flags when they are flipped in the default Bazel version (that TF uses)
build --incompatible_enforce_config_setting_visibility
# @todo - turn on this flag after addressing visibility violations
# build --incompatible_config_setting_private_default_visibility

# ------------------------ no more default configuration below this line ---------------------------
# here's the android configuration
# Bazel needs --cpu & --fat_apk_cpu to be set to the target CPU for correct building of transient dependencies
# https://docs.bazel.build/versions/master/user-manual.html#flag--fat_apk_cpu
build:android --crosstool_top=//external:android/crosstool
build:android --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:android_arm --config=android
build:android_arm --cpu=armeabi-v7a
build:android_arm --fat_apk_cpu=armeabi-v7a
build:android_arm64 --config=android
build:android_arm64 --cpu=arm64-v8a
build:android_arm64 --fat_apk_cpu=arm64-v8a
build:android_x86 --config=android
build:android_x86 --cpu=x86
build:android_x86 --fat_apk_cpu=x86
build:android_x86_64 --config=android
build:android_x86_64 --cpu=x86_64
build:android_x86_64 --fat_apk_cpu=x86_64

# set Android build to be a static build
# static libs are afterwards packaged together in a single .so to be deployed
build:android --dynamic_mode=off

# define macOS as the default Apple platform
build:macos --apple_platform_type=macos

# Need this to get gRPC on macOS going
build:macos --copt=-DGRPC_BAZEL_BUILD

# Apple Silicon macOS
build:macos_arm64 --cpu=darwin_arm64
build:macos_arm64 --macos_minimum_os=11.0

# iOS setup + fat binary
build:ios --apple_platform_type=ios
build:ios --apple_bitcode=embedded --copt=-fembed-bitcode
build:ios --copt=Wno-c++11-narrowing
build:ios_armv7 --config=ios
build:ios_armv7 --cpu=ios_armv7
build:ios_arm64 --config=ios
build:ios_arm64 --cpu=ios_arm64
build:ios_arm64e --config=ios
build:ios_arm64e --cpu=ios_arm64e
build:ios_sim_arm64 --config=ios
build:ios_sim_arm64 --cpu=ios_sim_arm64
build:ios_x86_64 --config=ios
build:ios_x86_64 --cpu=ios_x86_64
build:ios_fat --config=ios
build:ios_fat --ios_multi_cpus=armv7,arm64,i386,x86_64

# Configure a near-fully static build
# turn off modular op registration support
# This means loading TF with RTLD_GLOBAL in Python
# OOTB TF will then build with this dependency:
# //tensorflow:lib_tensorflow_framework.so
build:monolithic --define framework_shared_object=false
build:monolithic --define tsl_protobuf_header_only=false
build:monolithic --experimental_link_static_libraries_once=false # b/229868128

# MKL on macOs is not supported
# Set the TF_MKL_ROOT before building so that you can use a local MKL rather than 
# retrieving it from the pipes
build:mkl --define=build_with_mkl=true --define=enable_mkl=true
build:mkl --define=tensorflow_mkldnn_contraction_kernel=0
build:mkl --define=build_with_openmp=true
build:mkl -c opt
